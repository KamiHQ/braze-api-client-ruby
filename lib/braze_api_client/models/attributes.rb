=begin
#Braze

#Track users, send messages, export data, and more

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module BrazeClient
  class Attributes
    attr_accessor :country

    attr_accessor :current_location

    attr_accessor :date_of_first_session

    attr_accessor :date_of_last_session

    attr_accessor :dob

    attr_accessor :email

    attr_accessor :email_subscribe

    attr_accessor :email_open_tracking_disabled

    attr_accessor :email_click_tracking_disabled

    attr_accessor :facebook

    attr_accessor :first_name

    attr_accessor :gender

    attr_accessor :home_city

    attr_accessor :language

    attr_accessor :last_name

    attr_accessor :marked_email_as_spam_at

    attr_accessor :phone

    attr_accessor :push_subscribe

    attr_accessor :push_tokens

    attr_accessor :time_zone

    attr_accessor :twitter

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country' => :'country',
        :'current_location' => :'current_location',
        :'date_of_first_session' => :'date_of_first_session',
        :'date_of_last_session' => :'date_of_last_session',
        :'dob' => :'dob',
        :'email' => :'email',
        :'email_subscribe' => :'email_subscribe',
        :'email_open_tracking_disabled' => :'email_open_tracking_disabled',
        :'email_click_tracking_disabled' => :'email_click_tracking_disabled',
        :'facebook' => :'facebook',
        :'first_name' => :'first_name',
        :'gender' => :'gender',
        :'home_city' => :'home_city',
        :'language' => :'language',
        :'last_name' => :'last_name',
        :'marked_email_as_spam_at' => :'marked_email_as_spam_at',
        :'phone' => :'phone',
        :'push_subscribe' => :'push_subscribe',
        :'push_tokens' => :'push_tokens',
        :'time_zone' => :'time_zone',
        :'twitter' => :'twitter'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'country' => :'String',
        :'current_location' => :'AttributesCurrentLocation',
        :'date_of_first_session' => :'Time',
        :'date_of_last_session' => :'Time',
        :'dob' => :'Date',
        :'email' => :'String',
        :'email_subscribe' => :'String',
        :'email_open_tracking_disabled' => :'Boolean',
        :'email_click_tracking_disabled' => :'Boolean',
        :'facebook' => :'AttributesFacebook',
        :'first_name' => :'String',
        :'gender' => :'String',
        :'home_city' => :'String',
        :'language' => :'String',
        :'last_name' => :'String',
        :'marked_email_as_spam_at' => :'Time',
        :'phone' => :'String',
        :'push_subscribe' => :'String',
        :'push_tokens' => :'Array<AttributesPushTokens>',
        :'time_zone' => :'String',
        :'twitter' => :'AttributesTwitter'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BrazeClient::Attributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BrazeClient::Attributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'current_location')
        self.current_location = attributes[:'current_location']
      end

      if attributes.key?(:'date_of_first_session')
        self.date_of_first_session = attributes[:'date_of_first_session']
      end

      if attributes.key?(:'date_of_last_session')
        self.date_of_last_session = attributes[:'date_of_last_session']
      end

      if attributes.key?(:'dob')
        self.dob = attributes[:'dob']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_subscribe')
        self.email_subscribe = attributes[:'email_subscribe']
      end

      if attributes.key?(:'email_open_tracking_disabled')
        self.email_open_tracking_disabled = attributes[:'email_open_tracking_disabled']
      end

      if attributes.key?(:'email_click_tracking_disabled')
        self.email_click_tracking_disabled = attributes[:'email_click_tracking_disabled']
      end

      if attributes.key?(:'facebook')
        self.facebook = attributes[:'facebook']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'home_city')
        self.home_city = attributes[:'home_city']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'marked_email_as_spam_at')
        self.marked_email_as_spam_at = attributes[:'marked_email_as_spam_at']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'push_subscribe')
        self.push_subscribe = attributes[:'push_subscribe']
      end

      if attributes.key?(:'push_tokens')
        if (value = attributes[:'push_tokens']).is_a?(Array)
          self.push_tokens = value
        end
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'twitter')
        self.twitter = attributes[:'twitter']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      email_subscribe_validator = EnumAttributeValidator.new('String', ["opted_in", "unsubscribed", "subscribed"])
      return false unless email_subscribe_validator.valid?(@email_subscribe)
      gender_validator = EnumAttributeValidator.new('String', ["M", "F", "O", "N", "P", "null"])
      return false unless gender_validator.valid?(@gender)
      push_subscribe_validator = EnumAttributeValidator.new('String', ["opted_in", "unsubscribed", "subscribed"])
      return false unless push_subscribe_validator.valid?(@push_subscribe)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] email_subscribe Object to be assigned
    def email_subscribe=(email_subscribe)
      validator = EnumAttributeValidator.new('String', ["opted_in", "unsubscribed", "subscribed"])
      unless validator.valid?(email_subscribe)
        fail ArgumentError, "invalid value for \"email_subscribe\", must be one of #{validator.allowable_values}."
      end
      @email_subscribe = email_subscribe
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["M", "F", "O", "N", "P", "null"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] push_subscribe Object to be assigned
    def push_subscribe=(push_subscribe)
      validator = EnumAttributeValidator.new('String', ["opted_in", "unsubscribed", "subscribed"])
      unless validator.valid?(push_subscribe)
        fail ArgumentError, "invalid value for \"push_subscribe\", must be one of #{validator.allowable_values}."
      end
      @push_subscribe = push_subscribe
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country == o.country &&
          current_location == o.current_location &&
          date_of_first_session == o.date_of_first_session &&
          date_of_last_session == o.date_of_last_session &&
          dob == o.dob &&
          email == o.email &&
          email_subscribe == o.email_subscribe &&
          email_open_tracking_disabled == o.email_open_tracking_disabled &&
          email_click_tracking_disabled == o.email_click_tracking_disabled &&
          facebook == o.facebook &&
          first_name == o.first_name &&
          gender == o.gender &&
          home_city == o.home_city &&
          language == o.language &&
          last_name == o.last_name &&
          marked_email_as_spam_at == o.marked_email_as_spam_at &&
          phone == o.phone &&
          push_subscribe == o.push_subscribe &&
          push_tokens == o.push_tokens &&
          time_zone == o.time_zone &&
          twitter == o.twitter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [country, current_location, date_of_first_session, date_of_last_session, dob, email, email_subscribe, email_open_tracking_disabled, email_click_tracking_disabled, facebook, first_name, gender, home_city, language, last_name, marked_email_as_spam_at, phone, push_subscribe, push_tokens, time_zone, twitter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BrazeClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
